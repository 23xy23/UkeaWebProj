@model BootstrapProject.ViewModels.CustomerDashboardVM


@{
   Layout = "~/Views/Shared/_NavBarLayout.cshtml";
   ViewData["Title"] = "Customers Page";
}
@functions {
   public string GenerateStars(int rating)
   {
       return new string('‚≠ê', rating);
   }
}
<link rel="stylesheet" href="~/css/customer.css" asp-append-version="true" />


<body>
  <div class="container-fluid dashboard-container">
   <div class="header-div">
       <div class="module-header">Customer Summary</div>
       <button type="button" class="add-customer-btn" data-bs-toggle="modal" data-bs-target="#addCustomerModal"><p class="plus">+</p> <p>Add Customer</p></button>
   </div>


      <div class="row mb-4">
          <!-- New Customers Card -->
          <div class="custom-col">
              <div class="card shadow-bottom">
                  <div class="card-body">
                      <h5 class="card-title">Total Customers</h5>
                        <p class="card-text">@Model.UserCountToday</p>
                        @if (ViewBag.CustomerPercentageChange > 0)
                        {
                            <p class="text-success">+@ViewBag.CustomerPercentageChange.ToString("0.00")% from last month</p>
                        }
                        else if (ViewBag.CustomerPercentageChange < 0)
                        {
                            <p class="text-danger">@ViewBag.CustomerPercentageChange.ToString("0.00")% from last month</p>
                        }
                        else
                        {
                            <p class="text-warning">No change from last month</p>
                        }
                       <td class="d-none-768">
                          
                   </div>
              </div>
          </div>
          <!-- Total Orders Card -->
          <div class="custom-col mx-auto">
              <div class="card shadow-bottom">
                  <div class="card-body">
                      <h5 class="card-title">Total Orders</h5>
                      <p class="card-text">@Model.OrdersTotal</p>
                        @if (ViewBag.OrdersPercentage > 0)
                        {
                            <p class="text-success">+@ViewBag.OrdersPercentage.ToString("0.00")% from last month</p>
                        }
                        else if (ViewBag.OrdersPercentage < 0)
                        {
                            <p class="text-danger">@ViewBag.OrdersPercentage.ToString("0.00")% from last month</p>
                        }
                        else
                        {
                            <p class="text-warning">No change from last month</p>
                        }
                  </div>
              </div>
          </div>
          <!-- Total Calls Card -->
          <div class="custom-col mx-auto">
              <div class="card shadow-bottom">
                  <div class="card-body">
                      <h5 class="card-title">Total Calls</h5>
                      <p class="card-text">@ViewBag.InteractionsTotal</p>
                        @if (ViewBag.InteractionsPercentage > 0)
                        {
                            <p class="text-success">+@ViewBag.InteractionsPercentage.ToString("0.00")% from last month</p>
                        }
                        else if (ViewBag.InteractionsPercentage < 0)
                        {
                            <p class="text-danger">@ViewBag.InteractionsPercentage.ToString("0.00")% from last month</p>
                        }
                        else
                        {
                            <p class="text-warning">No change from last month</p>
                        }
                  </div>
              </div>
             
          </div>
      </div>
        <div class="row">
                   <div class="card shadow-bottom" style="max-width: 66.5%;">
                       <div class="card-body" >
                           <h5 class="card-title">Total Orders</h5>
                           <canvas id="customerOverTime"></canvas>
                            <br>
                           <button class="toggleChartButton">Show Bar Chart</button>
                
                       </div>
                     </div>
                   




<!-- Add Customer Modal -->
<div class="modal fade" id="addCustomerModal" tabindex="-1" aria-labelledby="addCustomerModalLabel" aria-hidden="true">
   <div class="modal-dialog">
       <div class="modal-content">
           <div class="modal-header">
               <h5 class="modal-title" id="addCustomerModalLabel">Add Customer</h5>
               <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
           </div>
           <div class="modal-body">
               <!-- Your form for adding a customer -->
               <form id="addCustomerForm">
                   <div class="mb-3">
                       <label for="dateOfBirth" class="form-label">Date of Birth</label>
                       <input type="date" class="form-control" id="dateOfBirth" name="dateOfBirth">
                   </div>
                   <div class="mb-3">
                       <label for="creditCardInfo" class="form-label">Credit Card Information</label>
                       <input type="text" class="form-control" id="creditCardInfo" name="creditCardInfo">
                   </div>
                   <div class="mb-3">
                       <label for="userID" class="form-label">User ID</label>
                       <input type="text" class="form-control" id="userID" name="userID">
                   </div>
               </form>
           </div>
           <div class="modal-footer">
               <button type="button" class="add-btn-secondary" data-bs-dismiss="modal">Close</button>
               <button type="button" class="add-btn" id="addCustomerBtn">Add Customer</button>
           </div>
       </div>
   </div>
</div>


          <!-- Urgent Tasks -->
<div class="kanban-column">
   <div class="kanban-header">Urgent Tasks
       <div class="progress">
           <div class="progress-bar" role="progressbar"
                style="width: @ViewBag.TasksCompletionPercentage.ToString("0")%;"
                aria-valuenow="@ViewBag.TasksCompletionPercentage.ToString("0")"
                aria-valuemin="0"
                aria-valuemax="100">
               @ViewBag.TasksCompletionPercentage.ToString("0")%
           </div>
       </div>
   </div>
   <div class="kanban-scroll-container">
       @foreach (var task in Model.UrgentTasks)
       {
           <div class="kanban-item">
               <input type="checkbox" id="checkbox-@task.CustomerTaskID" class="checkbox" data-task-id="@task.CustomerTaskID" data-task-description="@task.TaskDescription">
               <label for="checkbox-@task.CustomerTaskID" class="kanban-item-title">
               <div class="kanban-item-title">@task.TaskDescription</div>
               @if (task.TaskType == "call")
               {
                   <div class="kanban-item-price">üìû <small>@task.TaskDueDate</small></div>
               }
               else if (task.TaskType == "email")
               {
                   <div class="kanban-item-price">üì§ <small>@task.TaskDueDate</small></div>
               }
               else if (task.TaskType == "meeting")
               {
                   <div class="kanban-item-price">üßëüèª‚Äçüíª <small>@task.TaskDueDate</small></div>
               }
               else
               {
                   <div class="kanban-item-price">üìù <small>@task.TaskDueDate</small></div>
               }
               </label>
           </div>
       }
   </div>
   <button type="button" class="add-btn" data-bs-toggle="modal" data-bs-target="#addTaskModal">
       <span class="plus">+</span>
       Add Tasks
   </button>
</div>




@* Add Tasks Modal *@
<div class="modal fade" id="addTaskModal" tabindex="-1" role="dialog" aria-labelledby="addTaskModalLabel" aria-hidden="true">
   <div class="modal-dialog" role="document">
       <div class="modal-content">
           <div class="modal-header">
               <h5 class="modal-title" id="addTaskModalLabel">Add Task</h5>
               <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
           </div>
           <div class="modal-body">
               <form id="addTaskForm">
                   <div class="form-group">
                       <label for="customerId">Customer ID:</label>
                       <input type="text" class="form-control" id="customerId" name="customerId" required>
                   </div>
                   <div class="form-group">
                       <label for="taskId">Task ID:</label>
                       <input type="text" class="form-control" id="taskId" name="taskId" required>
                   </div>
                   <div class="form-group">
                       <label for="assignEmployeeId">Assigned Employee ID:</label>
                       <input type="text" class="form-control" id="assignEmployeeId" name="assignEmployeeId" required>
                   </div>
                   <div class="form-group">
                       <label for="dueDate">Due Date:</label>
                       <input type="date" class="form-control" id="dueDate" name="dueDate" required>
                   </div>
                   <!-- Add other form fields as needed -->
                   <button type="submit" class="add-btn">Submit Form</button>
               </form>
           </div>
       </div>
   </div>
</div>




<div class="customer-container shadow-bottom" style="max-width: 100%;">
   <div class="card-title">Recent Reviews</div>
   <div class="customer-list">
       <table id="myTable" class="table">
           <thead class="d-none-768">
               <tr>
                   <th>Customer</th>
                   <th>Product ID</th>
                   <th>Date</th>
                   <th>Rating</th>
                   <th>Action</th>
               </tr>
           </thead>
           <tbody>
@foreach (var review in Model.Reviews)
{
   <tr data-ReviewID="@review.ReviewID">
       <td width="25%">
           <div class="d-flex">
               <img src="/images/sienne.png" class="rounded-circle" width="40" height="40" alt="avatar">
               <div class="ms-2">
                   <p class="mb-0">@review.Customer.User.FirstName @review.Customer.User.LastName<br> <small>@review.Customer.User.Email</small></p>
                   <small>
                       <a href="mailto: @review.Customer.User.Email">
                           <td>@review.ProductID</td>
                           <div class="date">
                               <td> @review.ReviewDate </td>
                               <td><span class="rating">@GenerateStars(@review.Rating)</span></td>
                           </div>
                       </a>
                   </small>
               </div>
           </div>
       </td>
       <td class="d-none-768">
           <div class="action-wrapper">
               <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="w-100 bi bi-three-dots-vertical" viewBox="0 0 16 16">
                   <path class="icon-hover" d="M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0m0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0m0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0"/>
               </svg>
               <div class="action-list-wrapper">
                   <ul class="action-list shadow-bottom">
                       <li class="delete">
                           <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                               <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z"/>
                               <path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z"/>
                           </svg>
                           <p>Delete</p>
                       </li>
                   </ul>
               </div>
           </div>
       </td>
   </tr>
   <tr class="hidden-row">
       <td colspan="5">
           <div class="review-details">
               <p><strong>Review ID:</strong> @review.ReviewID</p>
               <p><strong>Review Text:</strong> @review.ReviewText</p>
               <p><strong>Rating:</strong> @review.Rating</p>
               <p><strong>Review Date:</strong> @review.ReviewDate</p>
           </div>
       </td>
   </tr>
}


                   </tbody>
               </table>
           </div>
<div class="modal fade" id="confirmModal" tabindex="-1" role="dialog" aria-labelledby="confirmModalLabel" aria-hidden="true">
   <div class="modal-dialog" role="document">
       <div class="modal-content">
           <div class="modal-header">
               <h5 class="modal-title" id="confirmModalLabel">Confirm Action</h5>
               <button type="button" class="add-btn" data-bs-dismiss="modal" aria-label="Close"><b>X</b></button>
               </button>
           </div>
           <div class="modal-body">
               Are you sure you want to delete this review?
           </div>
           <div class="modal-footer">
               <button type="button" class="btn btn-danger" id="confirmDelete">Delete</button>
           </div>
       </div>
   </div>
</div>
       </div>




   </div>
</div>
          </div>
      </div>
  </div>




  <!-- Chart.js Script -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
   function getMonthName(monthNumber) {
       const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
       return months[monthNumber - 1];
   }


   var ctx = document.getElementById('customerOverTime').getContext('2d');
   var myChart;


   function updateChart(data) {
       console.log(data);


       if (myChart) {
           myChart.destroy();
       }


       myChart = new Chart(ctx, {
           type: 'line',
           data: {
               labels: data.map(d => `${getMonthName(d.month)} ${d.year}`),
               datasets: [{
                   label: 'Total Orders',
                   data: data.map(d => d.totalOrders),
                   backgroundColor: 'rgba(39, 126, 113, 0.2)',
                   borderColor: 'rgba(148, 180, 159, 1)',
                   borderWidth: 1
               }]
           },
           options: {
               scales: {
                   y: {
                       beginAtZero: true
                   }
               }
           }
       });
   }


   document.getElementsByClassName('toggleChartButton')[0].addEventListener('click', () => {
       if (!myChart) return;


       // Toggle the chart type
       var newChartType = myChart.config.type === 'line' ? 'bar' : 'line';


       // Update the chart type
       myChart.config.type = newChartType;
       myChart.update();


       // Update the button text
       document.getElementsByClassName('toggleChartButton')[0].textContent = newChartType === 'line' ? 'Show Bar Chart' : 'Show Line Chart';
   });


   fetch('/Customer/OrderChart')
       .then(response => response.json())
       .then(data => {
           updateChart(data);
       });
</script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
   <script>
       $(document).ready(function () {
           $('.checkbox').change(function () {
               var taskId = $(this).data('task-id');
               var taskDescription = $(this).data('task-description');
               var isChecked = $(this).prop('checked');


               // Send AJAX request
               $.ajax({
                   type: 'POST',
                   url: '/Customer/UpdateCustomerTaskStatus',
                   data: {
                       taskId: taskId,
                       taskDescription: taskDescription,
                       isChecked: isChecked
                   },
                   success: function (data) {
                       console.log(data);
                   },
                   error: function (error) {
                       console.log(error);
                   }
               });
           });
       });
   </script>
   <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
   <script>
       $(function () {
           $('#addTaskForm').submit(function (e) {
               e.preventDefault();
               var customerId = $('#customerId').val();
               var taskId = $('#taskId').val();
               var assignEmployeeId = $('#assignEmployeeId').val();
               var dueDate = $('#dueDate').val();


               $.ajax({
                   type: 'POST',
                   url: '/Customer/CreateCustomerTask',
                   data: {
                       customerId: customerId,
                       taskId: taskId,
                       assignEmployeeId: assignEmployeeId,
                       dueDate: dueDate
                   },
                   success: function (data) {
                       console.log(data);
                       // Refresh the page or update the UI as needed
                       $('#addTaskModal').modal('hide');
                   },
                   error: function (error) {
                       console.log(error);
                   }
               });
           });
       });


$(document).ready(function () {
   $('.delete').click(function () {
       var reviewId = $(this).closest('tr').attr('data-ReviewID');
       console.log('Review ID:', reviewId); // Log the reviewId to the console
       var deleteButton = $(this); // Store reference to delete button


       if (reviewId === undefined) {
           console.error('Review ID is undefined');
           return;
       }


       $('#confirmModal').modal('show');


       $('#confirmDelete').click(function () {
           $.ajax({
               url: '/Customer/DeleteReview',
               type: 'POST',
               data: { reviewId: reviewId },
               success: function () {
                   console.log('Review deleted successfully');
                   // Remove the review from the UI
                   deleteButton.closest('tr').remove();
               },
               error: function () {
                   console.error('Failed to delete review.');
                   alert('Failed to delete review.');
               }
           });
           $('#confirmModal').modal('hide');
       });
   });
});




$(document).ready(function () {
   $('tr[data-ReviewID]').click(function () {
       $(this).next('.hidden-row').toggle();
   });
});




$(document).ready(function () {
   $('#addCustomerBtn').click(function () {
       var dateOfBirth = $('#dateOfBirth').val();
       var creditCardInfo = $('#creditCardInfo').val();
       var userID = parseInt($('#userID').val(), 10); // Ensure userID is an integer


       $.ajax({
           type: 'POST',
           url: '/Customer/AddCustomer',
           data: JSON.stringify({
               dateOfBirth: dateOfBirth,
               creditCardInfo: creditCardInfo,
               userID: userID
           }),
           contentType: 'application/json',
           success: function (data) {
               console.log('Customer added successfully');
               $('#addCustomerModal').modal('hide');
           },
           error: function (error) {
               console.error('Failed to add customer.');
           }
       });
   });
});


   </script>




   </body>